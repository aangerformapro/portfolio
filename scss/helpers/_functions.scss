@charset "UTF-8";

@function clearUnit($value) {
  @return math.div($value, ($value * 0 + 1));
}

@function clearWhitespace($string) {
  @while (str-index($string, " ") != null) {
    $index: str-index($string, " ");
    $string: "#{str-slice($string, 0, $index - 1)}#{str-slice($string, $index + 1)}";
  }
  @return $string;
}

@function convertToEm($value) {
  $base-value: 16px;
  $rem-value: math.div($value, $base-value);
  @return $rem-value + unquote("em");
}

@function convertToNumber($value) {

  $string-numerals: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $calc: 0;

  @for $i from 1 through str-length($value) {
    //Takes every digits in the $value
    $digit: str-slice($value, $i, $i);

    //Finds the index position of $digit in the $value
    $index-of-digit: index($string-numerals, $digit);

    // That is because SASS strings are not "0" based but "1", the index position of every digits will be more by one. Here is the simple calculation to find the actual number.
    $actual-digit: $index-of-digit - 1;

    // Calculates the actual number.
    $calc: $calc * 10 + $actual-digit;
  }
  @return $calc;
}

@function darken($color, $percentage) {
  @if isColor($color) {
    @return mix(black, $color, $percentage);
  }
}

@function fontSizer($size, $time) {
  @return $size * $time;
}

@function fontSource($font-family, $file-path, $file-formats) {
  $list: ();
  @if map-has-key($map-for-font-formats, $file-formats) {
    @if index(eot woff2 woff ttf, $file-formats) {
      $src-value: url('#{$file-path}.#{if(not index(eot, $file-formats), $file-formats, $file-formats+"?#iefix")}')
        #{map-get($map-for-font-formats, $file-formats)};
      $list: append($list, $src-value, comma);
    } @else if index(svg, $file-formats) {
      $font-family: clearWhitespace($font-family);
      $src-value: url('#{$file-path}.#{$file-formats + "#" + $font-family}')
        #{map-get($map-for-font-formats, $file-formats)};
      $list: append($list, $src-value, comma);
    }
  }
  @return $list;
}

@function isColor($value) {
  $list: ();
  @for $i from 1 through length($value) {
    @if type-of(nth($value, $i)) == "color" {
      $list: append($list, nth($value, $i), comma);
    } @else {
      @error "'#{nth($value, $i)}' is not a color value, please replace it with a valid one.";
    }
  }
  @return $list;
}

@function isNumber($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else {
    @warn "Please make sure you pass a valid number!";
  }
}
@function isTime($value) {
  @for $i from 1 through length($value) {
    @if (type-of($value) == "number" and index("ms" "s", unit($value)) != null) or $value == 0 {
      @return $value;
    } @else {
      @error "'#{$value}' is not a valid time value. Time values must be specified in either seconds (s) or milliseconds (ms). Please try one of the following forms: '1s', '0.2s', or '3ms'";
    }
  }
}

@function lighten($color, $percentage) {
  @if isColor($color) {
    @return mix(white, $color, $percentage);
  }
}

@function mapDeepGet($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function null($value, $seperation: comma, $skip: false) {
  $list: ();
  @for $i from 1 through length($value) {
    @if nth($value, $i) == null {
      $list: append($list, if($skip, null, 0), $seperation);
    } @else {
      $list: append($list, nth($value, $i), $seperation);
    }
  }
  @return $list;
}

// This function checks if the argument has a px unit. If not, it adds a px unit to the end of the argument.

@function pixelify($value) {
  @if unit($value) == "px" {
    @return $value;
  } @else if unit($value) != "px" {
    @return clearUnit($value) * 1px;
  } @else if unitless($value) == true {
    @return $value * 1px;
  }
}

@function pseudoSelector($elements, $pseudo: null) {
  $list: ();
  @each $element in $elements {
    $element: if($pseudo, $element + ":" + $pseudo, $element);
    $list: append($list, $element, comma);
  }
  @return $list;
}

@function remify($value) {
  $base-value: 16px;
  $rem-value: math.div($value, $base-value);
  @return $rem-value * 1rem;
}

@function shorthandProperty($value) {
  @if length($value) == 1 {
    @return nth($value, 1) nth($value, 1) nth($value, 1) nth($value, 1);
  } @else if length($value) == 2 {
    @return nth($value, 1) nth($value, 2) nth($value, 1) nth($value, 2);
  } @else if length($value) == 3 {
    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 2);
  } @else if length($value) == 4 {
    @return nth($value, 1) nth($value, 2) nth($value, 3) nth($value, 4);
  } @else if length($value) > 4 {
    @error "You've passed #{length($value)} arguments. Please do not pass more than 4.";
  }
}

@function validateBreakpoint($value) {
  @for $i from 1 through length($value) {
    @if map-has-key($map-for-breakpoints, $value) {
      @return map-get($map-for-breakpoints, nth($value, $i));
    } @else {
      @return nth($value, $i);
    }
  }
}

@function validateLength($value) {
  $list: ("auto", "inherit", "initial", 0);
  @if index($list, $value) {
    @return $value;
  } @else if type-of($value) == "number" and not unitless($value) {
    @return $value;
  } @else {
    @warn "Please pass some values with unit like `#{$value}px`, `#{$value}em`, or `#{$value}%` etc. or pass one of the following arguments: `auto`, ìnherit`, ìnitial` or `0`.";
    @return $value;
  }
}

@function validateScissors($value) {
  $list: ();
  @for $i from 1 through length($value) {
    @if nth($value, $i) == null {
      $list: append($list, 0px, comma);
    } @else if unitless(nth($value, $i)) {
      $pixelified: pixelify(nth($value, $i));
      $list: append($list, $pixelified, comma);
    } @else {
      $list: append($list, nth($value, $i), comma);
    }
  }
  @return $list;
}